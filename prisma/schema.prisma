// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  // output          = "../generated/prisma"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

enum Highlight {
  HighSpeedInternetAccess
  WasherDryer
  AirConditioning
  Heating
  SmokeFree
  CableReady
  SatelliteTV
  DoubleVanities
  TubShower
  Intercom
  SprinklerSystem
  RecentlyRenovated
  CloseToTransit
  GreatView
  QuietNeighborhood
}

enum Amenity {
  WasherDryer
  AirConditioning
  Dishwasher
  HighSpeedInternet
  HardwoodFloors
  WalkInClosets
  Microwave
  Refrigerator
  Pool
  Gym
  Parking
  PetsAllowed
  WiFi
}

enum PropertyType {
  Rooms
  Tinyhouse
  Apartment
  Villa
  Townhouse
  Cottage
}

enum ApplicationStatus {
  Pending
  Denied
  Approved
}

enum PaymentStatus {
  Pending
  Paid
  PartiallyPaid
  Overdue
}

model Property {
  id                String       @id @default(uuid())
  name              String
  description       String
  pricePerMonth     Float
  securityDeposit   Float
  applicationFee    Float
  photoUrls         String[]
  amenities         Amenity[]
  highlights        Highlight[]
  isPetsAllowed     Boolean      @default(false)
  isParkingIncluded Boolean      @default(false)
  beds              Int
  baths             Float
  squareFeet        Int
  propertyType      PropertyType
  postedDate        DateTime     @default(now())
  averageRating     Float?       @default(0)
  numberOfReviews   Int?         @default(0)
  locationId        String
  managerId         String

  location     Location      @relation(fields: [locationId], references: [id], onDelete: Cascade)
  manager      Manager       @relation(fields: [managerId], references: [id], onDelete: Cascade)
  leases       Lease[]
  applications Application[]
  favoritedBy  Tenant[]      @relation("TenantFavorites")
  tenants      Tenant[]      @relation("TenantProperties")
}

model Manager {
  id           String @id @default(uuid())
  name         String
  email        String @unique
  passwordHash String
  phoneNumber  String

  managedProperties Property[]
}

model Tenant {
  id           String @id @default(uuid())
  name         String
  email        String @unique
  passwordHash String
  phoneNumber  String

  properties   Property[]    @relation("TenantProperties")
  favorites    Property[]    @relation("TenantFavorites")
  applications Application[]
  leases       Lease[]
}

model Location {
  id          String                                @id @default(uuid())
  address     String
  city        String
  state       String
  country     String
  postalCode  String
  coordinates Unsupported("geography(Point, 4326)")

  properties Property[]
}

model Application {
  id              String            @id @default(uuid())
  applicationDate DateTime
  status          ApplicationStatus
  propertyId      String
  tenantId        String
  email           String
  name            String
  phoneNumber     String
  message         String?
  leaseId         String?           @unique

  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  tenant   Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  lease    Lease?   @relation(fields: [leaseId], references: [id], onDelete: Cascade)
}

model Lease {
  id         String   @id @default(uuid())
  startDate  DateTime
  endDate    DateTime
  rent       Float
  deposit    Float
  propertyId String
  tenantId   String

  property    Property     @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  tenant      Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  application Application?
  payments    Payment[]
}

model Payment {
  id            String        @id @default(uuid())
  amountDue     Float
  amountPaid    Float
  dueDate       DateTime
  paymentDate   DateTime
  paymentStatus PaymentStatus
  leaseId       String

  lease Lease @relation(fields: [leaseId], references: [id], onDelete: Cascade)
}
