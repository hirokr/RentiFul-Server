generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  extensions        = [postgis]
}

enum Highlight {
  HighSpeedInternetAccess
  WasherDryer
  AirConditioning
  Heating
  SmokeFree
  CableReady
  SatelliteTV
  DoubleVanities
  TubShower
  Intercom
  SprinklerSystem
  RecentlyRenovated
  CloseToTransit
  GreatView
  QuietNeighborhood
}

enum Amenity {
  WasherDryer
  AirConditioning
  Dishwasher
  HighSpeedInternet
  HardwoodFloors
  WalkInClosets
  Microwave
  Refrigerator
  Pool
  Gym
  Parking
  PetsAllowed
  WiFi
}

enum PropertyType {
  Rooms
  Tinyhouse
  Apartment
  Villa
  Townhouse
  Cottage
}

enum ApplicationStatus {
  Pending
  Denied
  Approved
}

enum PaymentStatus {
  Pending
  Paid
  PartiallyPaid
  Overdue
}

enum UserRole {
  TENANT
  MANAGER
}

model User {
  id              String   @id @default(uuid())
  name            String
  email           String   @unique
  passwordHash    String? // null for OAuth users
  phoneNumber     String?
  profilePicture  String? // UploadThing URL
  role            UserRole @default(TENANT)
  provider        String? // oauth provider (google, github, credentials)
  providerId      String? // oauth provider user id
  hasSelectedRole Boolean  @default(false) // tracks if user completed role selection
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations based on role
  managedProperties Property[]    @relation("ManagerProperties") // if role = MANAGER
  tenantProperties  Property[]    @relation("TenantProperties") // if role = TENANT
  favorites         Property[]    @relation("TenantFavorites") // tenant favorited properties
  applications      Application[]
  leases            Lease[]

  @@unique([provider, providerId])
}

model Property {
  id                String       @id @default(uuid())
  name              String
  description       String
  pricePerMonth     Float
  securityDeposit   Float
  applicationFee    Float
  photoUrls         String[]
  amenities         Amenity[]
  highlights        Highlight[]
  isPetsAllowed     Boolean      @default(false)
  isParkingIncluded Boolean      @default(false)
  beds              Int
  baths             Float
  squareFeet        Int
  propertyType      PropertyType
  postedDate        DateTime     @default(now())
  averageRating     Float?       @default(0)
  numberOfReviews   Int?         @default(0)
  locationId        String
  managerId         String

  location     Location      @relation(fields: [locationId], references: [id], onDelete: Cascade)
  manager      User          @relation("ManagerProperties", fields: [managerId], references: [id], onDelete: Cascade)
  leases       Lease[]
  applications Application[]
  favoritedBy  User[]        @relation("TenantFavorites")
  tenants      User[]        @relation("TenantProperties")
}

model Location {
  id          String                   @id @default(uuid())
  address     String
  city        String
  state       String
  country     String
  postalCode  String
  coordinates Unsupported("geography")
  properties  Property[]
}

model Application {
  id              String            @id @default(uuid())
  applicationDate DateTime
  status          ApplicationStatus
  propertyId      String
  tenantId        String
  email           String
  name            String
  phoneNumber     String
  message         String?
  leaseId         String?           @unique

  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  tenant   User     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  lease    Lease?   @relation(fields: [leaseId], references: [id], onDelete: Cascade)
}

model Lease {
  id         String   @id @default(uuid())
  startDate  DateTime
  endDate    DateTime
  rent       Float
  deposit    Float
  propertyId String
  tenantId   String

  property    Property     @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  tenant      User         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  application Application?
  payments    Payment[]
}

model Payment {
  id            String        @id @default(uuid())
  amountDue     Float
  amountPaid    Float
  dueDate       DateTime
  paymentDate   DateTime
  paymentStatus PaymentStatus
  leaseId       String

  lease Lease @relation(fields: [leaseId], references: [id], onDelete: Cascade)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}
